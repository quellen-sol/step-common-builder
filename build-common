#!/usr/bin/bash

echoUsage()
{
    echo "Usage: build-common <package-name> <destination> [FLAGS]"
    echo "  <package-name>  The name of the package to build"
    echo "  <destination>   The destination directory to build to"
    echo "Flags:"
    echo "  -n  Skip installation confirmation"
}

#######################
# Change these to your own paths
# i.e. all my Step repos live in ~/dev
# See the autocompletion script (.bashrc) for how I have it set up
STEP_DEV_DIR=~/dev
COMMON_DIR=$STEP_DEV_DIR/step-common
#######################

# If not enough arguments, print usage and exit
if [ $# -lt 2 ] || [ $# -gt 3 ]; then
    echoUsage
    exit 1
fi

shift 2

# Parse -n
SKIP_CONFIRM=false
while getopts ":n" opt; do
    case $opt in
        n)
            SKIP_CONFIRM=true
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done


PACKAGE_NAME=$1
DESTINATION=$2
FINAL_DIR=$STEP_DEV_DIR/$DESTINATION

echo "Building $PACKAGE_NAME"

cd $COMMON_DIR
npx nx reset
npx nx build $PACKAGE_NAME
cd ./dist/packages/$PACKAGE_NAME
tar -czf ../$PACKAGE_NAME.tgz .
mv ../$PACKAGE_NAME.tgz $FINAL_DIR

if [ $SKIP_CONFIRM = true ]; then
    echo "Skipping installation confirmation"
else
    read -p "Install package? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Installing package..."
    else
        echo "Exiting..."
        exit 0
    fi
fi

PKG_MANAGER=""
LOCK_FILE=""
if [ -f $FINAL_DIR/yarn.lock ]; then
    LOCK_FILE="yarn.lock"
    PKG_MANAGER="yarn"
elif [ -f $FINAL_DIR/package-lock.json ]; then
    LOCK_FILE="package-lock.json"
    PKG_MANAGER="npm"
elif [ -f $FINAL_DIR/pnpm-lock.yaml ]; then
    LOCK_FILE="pnpm-lock.yaml"
    PKG_MANAGER="pnpm"
else
    echo "No lockfile found. Exiting..."
    exit 0
fi

cd $FINAL_DIR

git checkout develop -- $LOCK_FILE
$PKG_MANAGER install
